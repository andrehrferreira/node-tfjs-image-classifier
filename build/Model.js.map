{"version":3,"sources":["../src/Model.js"],"names":["tf","process","env","gpu","require","DefaultOptions","inputWidth","inputHeight","inputChannels","learningRate","optimizer","denseUnits","epochs","batchSizeFraction","TFJSModel","options","currentModelPath","type","outputSize","data","TFJSData","modelClass","DefaultModel","MNISTModel","CIFAR10Model","VGG16Model","KerasModel","labels","images","length","model","generate","toTrain","loadTrainData","batchSize","Math","floor","shape","shuffledIndices","Int32Array","util","createShuffledIndices","console","time","fit","gather","validationSplit","callbacks","node","tensorBoard","fileOrDirname","load","loadLayersModel","fse","readJson","path","join","then","obj","Labels","dirname","ensureDirSync","save","writeJson","filename","ready","Float32Array","fs","readFileSync","input_1","predict","__fileToTensor","bufferImage","topk","values","indices","label","dataSync","confidence","buffer","__bufferToTensor"],"mappings":"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","sourcesContent":["import path from \"path\";\r\nimport fse from \"fs-extra\";\r\nimport fs from \"fs\";\r\n\r\nimport DefaultModel from \"./models/default\";\r\nimport MNISTModel from \"./models/mnist\";\r\nimport CIFAR10Model from \"./models/cifar10\";\r\nimport VGG16Model from \"./models/vgg16\";\r\nimport KerasModel from \"./models/keras\";\r\nimport TFJSData from \"./Data\";\r\n\r\nimport { timingSafeEqual } from \"crypto\";\r\n\r\nconst tf = (process.env.gpu === true) ? require(\"@tensorflow/tfjs-node-gpu\") : require(\"@tensorflow/tfjs-node\");\r\n\r\nconst DefaultOptions = {\r\n    inputWidth: 7,\r\n    inputHeight: 7,\r\n    inputChannels: 1024,\r\n    learningRate: 0.0001,\r\n    optimizer: \"adam\",\r\n    denseUnits: 100,\r\n    epochs: 200,\r\n    batchSizeFraction: 0.2\r\n};\r\n\r\nclass TFJSModel{\r\n    constructor(options){\r\n        this.currentModelPath = null;\r\n        this.options = options || DefaultOptions;\r\n        this.type = options.type || \"default\"; // default, cifar10, mnist, vgg16, keras\r\n        this.denseUnits = options.denseUnits || DefaultOptions.denseUnits; \r\n        this.epochs = options.epochs || DefaultOptions.epochs; \r\n        this.batchSizeFraction = options.batchSizeFraction || DefaultOptions.batchSizeFraction;\r\n        this.outputSize = null;\r\n\r\n        this.data = new TFJSData(options);\r\n\r\n        /* eslint-disable */\r\n        switch(this.type){\r\n            case \"default\": this.modelClass = new DefaultModel(options); break;\r\n            case \"mnist\": this.modelClass = new MNISTModel(options); break;\r\n            case \"cifar10\": this.modelClass = new CIFAR10Model(options); break;\r\n            case \"vgg16\": this.modelClass = new VGG16Model(options); break;\r\n            case \"keras\": this.modelClass = new KerasModel(options); break;\r\n            default: throw \"The informed model is not compatible\";\r\n        }\r\n        /* eslint-enable */\r\n    }\r\n\r\n    /**\r\n     * Function to input data for training\r\n     * \r\n     * @param object data \r\n     * @return void\r\n     */\r\n    input(data){\r\n        if(this.type == \"keras\")\r\n            throw \"Keras model cannot be generated\";\r\n\r\n        if(!data.labels || !data.images)\r\n            throw \"There are no valid labels or images in the entry\";\r\n\r\n        this.data = data;\r\n        this.outputSize = this.data.labels.length;\r\n    }\r\n\r\n    /**\r\n     * Function to generate model based on configurations\r\n     * \r\n     * @return void\r\n     */\r\n    generate(){\r\n        if(this.type == \"keras\")\r\n            throw \"Keras model cannot be generated\";\r\n\r\n        if(!this.outputSize)\r\n            throw \"Error when trying to generate the model for not identifying outputSize\";\r\n\r\n        this.model = this.modelClass.generate(this.outputSize);\r\n    }\r\n\r\n    /**\r\n     * Function to perform data training\r\n     * \r\n     * @return Promise\r\n     */\r\n    async train(){\r\n        if(this.type == \"keras\")\r\n            throw \"Keras type model cannot be trained\";\r\n\r\n        let loadTrainData = await this.data.toTrain(this.model);\r\n        \r\n        let batchSize = Math.floor(\r\n            loadTrainData.images.shape[0] * this.batchSizeFraction\r\n        );\r\n\r\n        if (!(batchSize > 0)) \r\n            throw \"Batch size is 0 or NaN. Please choose a non-zero fraction.\";\r\n        \r\n        let shuffledIndices = new Int32Array(\r\n            tf.util.createShuffledIndices(loadTrainData.labels.shape[0])\r\n        );\r\n        \r\n        console.time(\"Training Time\");\r\n        return this.model.fit(\r\n            loadTrainData.images.gather(shuffledIndices),\r\n            loadTrainData.labels.gather(shuffledIndices),\r\n            {\r\n                batchSize,\r\n                epochs: this.epochs,\r\n                validationSplit: 0.15,\r\n                callbacks: tf.node.tensorBoard(\"/tmp/tf_fit_logs\")\r\n                /*callbacks: {\r\n                    onBatchEnd: async (batch, logs) => {\r\n                        //console.log(\"Loss: \" + logs.loss.toFixed(5));\r\n                    },\r\n                    onTrainEnd: async logs => {\r\n                        console.timeEnd(\"Training Time\");\r\n                    }\r\n                }*/\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Function to load pre-trained model\r\n     * \r\n     * @param string fileOrDirname\r\n     * @return Promise\r\n     */\r\n    async load(fileOrDirname){\r\n        if(this.type == \"keras\"){\r\n            this.model = this.modelClass.load(fileOrDirname);\r\n        }\r\n        else{\r\n            this.model = await tf.loadLayersModel(\r\n                \"file://\" + fileOrDirname + \"/model.json\"\r\n            );\r\n    \r\n            this.data.labels = await fse\r\n                .readJson(path.join(fileOrDirname, \"labels.json\"))\r\n                .then(obj => obj.Labels);\r\n    \r\n            this.currentModelPath = fileOrDirname;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to save pre-trained model\r\n     * \r\n     * @param string dirname\r\n     * @return Promise\r\n     */\r\n    async save(dirname){\r\n        fse.ensureDirSync(dirname);\r\n\r\n        await this.model.save(\"file://\" + dirname);\r\n        await fse.writeJson(path.join(dirname, \"labels.json\"), {\r\n            Labels: this.data.labels\r\n        });\r\n\r\n        this.currentModelPath = dirname;\r\n    }\r\n\r\n    /**\r\n     * Function to perform prediction by file\r\n     * \r\n     * @param string filename\r\n     * @return Promise\r\n     */\r\n    async predictFromFile(filename){\r\n        if(this.type == \"keras\"){\r\n            await this.model.ready();\r\n\r\n            return await this.model.predict({\r\n                input_1: new Float32Array(await fs.readFileSync(filename))\r\n            });\r\n        }\r\n        else{\r\n            let bufferImage = await this.data.__fileToTensor(filename);\r\n            let { values, indices } = this.model.predict(bufferImage).topk();\r\n            \r\n            return {\r\n                label: this.data.labels[indices.dataSync()[0]],\r\n                confidence: values.dataSync()[0]\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Buffer prediction function\r\n     * \r\n     * @param string filename\r\n     * @return Promise\r\n     */\r\n    async predict(buffer){\r\n        if(this.type == \"keras\"){\r\n            await this.model.ready();\r\n\r\n            return await this.model.predict({\r\n                input_1: new Float32Array(buffer)\r\n            });\r\n        }\r\n        else{\r\n            let bufferImage = await this.data.__bufferToTensor(buffer);\r\n            let { values, indices } = this.model.predict(bufferImage).topk();\r\n            \r\n            return {\r\n                label: this.data.labels[indices.dataSync()[0]],\r\n                confidence: values.dataSync()[0]\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport default TFJSModel;"],"file":"Model.js"}