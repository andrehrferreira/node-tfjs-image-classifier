{"version":3,"sources":["../../src/models/mnist.js"],"names":["tf","process","env","gpu","require","DefaultOptions","inputWidth","inputHeight","inputChannels","optimizer","MNISTModel","options","outputSize","model","sequential","add","layers","conv2d","inputShape","filters","kernelSize","activation","maxPooling2d","poolSize","flatten","dropout","rate","dense","units","optimzer","Optimizer","compile","getOptimzer","loss","metrics","inputs","input","outputs","output"],"mappings":"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","sourcesContent":["/**\r\n * MNIST Model\r\n * \r\n * @see http://yann.lecun.com/exdb/mnist/\r\n * @see https://github.com/tensorflow/tfjs-examples/blob/master/mnist/index.js\r\n * @see https://www.analyticsvidhya.com/blog/2020/02/learn-image-classification-cnn-convolutional-neural-networks-3-datasets/\r\n * @see https://towardsdatascience.com/image-classification-in-10-minutes-with-mnist-dataset-54c35b77a38d\r\n */\r\n\r\nimport Optimizer from \"../Optimizer\";\r\nconst tf = (process.env.gpu === true) ? require(\"@tensorflow/tfjs-node-gpu\") : require(\"@tensorflow/tfjs-node\");\r\n\r\nconst DefaultOptions = {\r\n    inputWidth: 28,\r\n    inputHeight: 28,\r\n    inputChannels: 1,\r\n    optimizer: \"rmsprop\"\r\n};\r\n\r\nclass MNISTModel {\r\n    constructor(options){\r\n        this.options = options || DefaultOptions;\r\n        this.inputWidth = options.inputWidth || DefaultOptions.inputWidth;\r\n        this.inputHeight = options.inputHeight || DefaultOptions.inputHeight;\r\n        this.inputChannels = options.inputChannels || DefaultOptions.inputChannels;\r\n    }\r\n\r\n    generate(outputSize){\r\n\r\n        //Input\r\n        this.model = tf.sequential();\r\n        this.model.add(tf.layers.conv2d({\r\n            inputShape: [this.inputHeight, this.inputWidth, this.inputChannels],\r\n            filters: 28,\r\n            kernelSize: 3,\r\n            activation: \"relu\",\r\n        }));\r\n        \r\n        this.model.add(tf.layers.maxPooling2d({ poolSize: [2, 2] }));\r\n        this.model.add(tf.layers.conv2d({ filters: 64, kernelSize: 3, activation: \"relu\" }));\r\n        this.model.add(tf.layers.conv2d({ filters: 64, kernelSize: 3, activation: \"relu\" }));\r\n        this.model.add(tf.layers.maxPooling2d({ poolSize: [2, 2] }));\r\n\r\n        //Output\r\n        this.model.add(tf.layers.flatten());\r\n        this.model.add(tf.layers.dropout({ rate: 0.25 }));\r\n        this.model.add(tf.layers.dense({ units: 128, activation: \"relu\" }));\r\n        this.model.add(tf.layers.dropout({ rate: 0.5 }));\r\n        this.model.add(tf.layers.dense({ units: outputSize, activation: \"softmax\" }));\r\n\r\n        let optimzer = new Optimizer(this.options);\r\n        \r\n        this.model.compile({\r\n            optimizer: optimzer.getOptimzer(),\r\n            loss: \"categoricalCrossentropy\",\r\n            metrics: [\"accuracy\"],\r\n        });\r\n\r\n        return tf.model({\r\n            inputs: this.model.layers[0].input, \r\n            outputs: this.model.layers[1].output\r\n        });\r\n    }\r\n}\r\n\r\nexport default MNISTModel;"],"file":"mnist.js"}