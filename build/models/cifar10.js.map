{"version":3,"sources":["../../src/models/cifar10.js"],"names":["tf","process","env","gpu","require","DefaultOptions","inputWidth","inputHeight","inputChannels","learningRate","optimizer","CIFAR10Model","options","outputSize","model","sequential","add","layers","conv2d","inputShape","kernelSize","filters","activation","padding","maxPooling2d","poolSize","dropout","rate","flatten","dense","units","optimzer","Optimizer","compile","getOptimzer","loss","metrics","inputs","input","outputs","output"],"mappings":"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","sourcesContent":["/**\r\n * CIFAR10 Model\r\n * \r\n * @see https://www.cs.toronto.edu/~kriz/cifar.html\r\n * @see https://github.com/MazenAly/Cifar100/blob/master/CIFAR10.py\r\n * @see https://github.com/zqingr/tfjs-examples/blob/master/src/examples/cifar10_cnn/index.ts\r\n * @see https://cs.stanford.edu/people/karpathy/convnetjs/demo/cifar10.html\r\n * @see https://www.analyticsvidhya.com/blog/2020/02/learn-image-classification-cnn-convolutional-neural-networks-3-datasets/\r\n * @see https://keras.io/examples/cifar10_cnn/\r\n */\r\n\r\nimport Optimizer from \"../Optimizer\";\r\nconst tf = (process.env.gpu === true) ? require(\"@tensorflow/tfjs-node-gpu\") : require(\"@tensorflow/tfjs-node\");\r\n\r\nconst DefaultOptions = {\r\n    inputWidth: 32,\r\n    inputHeight: 32,\r\n    inputChannels: 3,\r\n    learningRate: 0.001,\r\n    optimizer: \"adam\"\r\n};\r\n\r\nclass CIFAR10Model {\r\n    constructor(options){\r\n        this.options = options || DefaultOptions;\r\n        this.inputWidth = options.inputWidth || DefaultOptions.inputWidth;\r\n        this.inputHeight = options.inputHeight || DefaultOptions.inputHeight;\r\n        this.inputChannels = options.inputChannels || DefaultOptions.inputChannels;\r\n        this.learningRate = options.learningRate || DefaultOptions.learningRate;\r\n    }\r\n\r\n    generate(outputSize){       \r\n\r\n        //Input\r\n        this.model = tf.sequential();\r\n        this.model.add(tf.layers.conv2d({ \r\n            inputShape: [this.inputHeight, this.inputWidth, this.inputChannels],\r\n            kernelSize: 3,\r\n            filters: 32,\r\n            activation: \"relu\",\r\n            padding: \"same\"\r\n        }));\r\n\r\n        this.model.add(tf.layers.conv2d({ kernelSize: 3, filters: 32, activation: \"relu\" }));\r\n        this.model.add(tf.layers.maxPooling2d({ poolSize: [2, 2] }));\r\n        this.model.add(tf.layers.dropout({ rate: 0.25 }));\r\n        this.model.add(tf.layers.conv2d({ kernelSize: 3, filters: 64, activation: \"relu\", padding: \"same\" }));\r\n        this.model.add(tf.layers.conv2d({ kernelSize: 3, filters: 64, activation: \"relu\" }));\r\n        this.model.add(tf.layers.maxPooling2d({ poolSize: [2, 2] }));\r\n        this.model.add(tf.layers.dropout({ rate: 0.25 }));\r\n        \r\n        //Output\r\n        this.model.add(tf.layers.flatten());\r\n        this.model.add(tf.layers.dense({ units: 512, activation: \"relu\" }));\r\n        this.model.add(tf.layers.dropout({ rate: 0.5 }));\r\n        this.model.add(tf.layers.dense({ units: outputSize, activation: \"softmax\" }));\r\n\r\n        let optimzer = new Optimizer(this.options);\r\n        \r\n        this.model.compile({\r\n            optimizer: optimzer.getOptimzer(),\r\n            loss: \"categoricalCrossentropy\",\r\n            metrics: [\"accuracy\"]\r\n        });\r\n\r\n        return tf.model({\r\n            inputs: this.model.layers[0].input, \r\n            outputs: this.model.layers[1].output\r\n        });\r\n    }\r\n}\r\n\r\nexport default CIFAR10Model;"],"file":"cifar10.js"}